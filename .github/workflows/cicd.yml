name: C/C++ CI

on:
  pull_request:
    branches: [ default, dev ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - name: checkout_repo
        uses: actions/checkout@v2
      - name: set up build environment
        run: |
          export PATH="/usr/share/miniconda/bin:$PATH"
          conda install -c conda-forge -q mamba
          mamba env create -q -f environment-linux.yaml
      - name: generate
        run: |
          export PATH="/usr/share/miniconda/envs/snakemake_unit_tests-env/bin:$PATH"
          ./generate.bash
      - name: configure
        run: |
          export PATH="/usr/share/miniconda/envs/snakemake_unit_tests-env/bin:$PATH"
          ./configure --with-boost=/usr/share/miniconda/envs/snakemake_unit_tests-env --with-boost-libdir=/usr/share/miniconda/envs/snakemake_unit_tests-env/lib
      - name: build
        run: |
          export PATH="/usr/share/miniconda/envs/snakemake_unit_tests-env/bin:$PATH"
          make -j2
          ./snakemake_unit_tests.out -h
      - name: TAP
        run: |
          export PATH="/usr/share/miniconda/envs/snakemake_unit_tests-env/bin:$PATH"
          make -j2 check
      - name: run unit tests
        run: |
          export PATH="/usr/share/miniconda/envs/snakemake_unit_tests-env/bin:$PATH"
          ./test_suite.out
      - name: run code coverage
        run: |
          export PATH="/usr/share/miniconda/envs/snakemake_unit_tests-env/bin:$PATH"
          x86_64-conda-linux-gnu-gcov -r $(find snakemake_unit_tests \( -name "*gcda" -and -not -iname "*test*" \) -print)
          gcovr -g -x
          curl -Os https://uploader.codecov.io/latest/linux/codecov
          chmod +x codecov
          ./codecov
