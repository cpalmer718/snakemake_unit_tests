#!/bin/bash

## Test: rules buried in python code are correctly detected
echo 1..1

TESTNAME="test9"
TESTDESCRIPTION="correctly detect buried rules"
INPUTDIR="tests/examples/$TESTNAME/input"
OUTPUTDIR="tests/examples/$TESTNAME/output"
EXPECTEDDIR="tests/examples/$TESTNAME/expected"
SNAKEMAKE_UNIT_TESTS="./snakemake_unit_tests.out"
INSTDIR="inst"

## just in case, delete existing output from previously failed tests
rm -Rf "$OUTPUTDIR"

## run test, dumping output into appropriate directory
"$SNAKEMAKE_UNIT_TESTS" -i "$INSTDIR" -l "$INPUTDIR/run.log" -o "$OUTPUTDIR" -p "$INPUTDIR" -s "$INPUTDIR/workflow/Snakefile" > /dev/null 2>&1

## compare expected to observed output, ignoring pytest infrastructure
for file in $(find "$EXPECTEDDIR" -type f \( -name "*" ! -name "*.py" \) -print);
do
    actual=$(echo "$file" | sed 's/\/expected\//\/output\//')
    if [[ ! -f "$actual" ]] ; then
	echo "not ok - $TESTDESCRIPTION expected file $file not present in results"
	exit 1
    else
	actualdiff=$(diff $file $actual | wc -l)
	if [[ "$actualdiff" -gt 0 ]] ; then
	    echo "not ok - $TESTDESCRIPTION expected file $file differs from observed"
	    exit 2
	fi
    fi
done

## compare obsered to expected output, ignoring pytest infrastructure
##   flag files present in one absent in other
for file in $(find "$OUTPUTDIR" -type f \( -name "*" ! -name "*.py" \) -print);
do
    expected=$(echo "$file" | sed 's/\/output\//\/expected\//')
    if [[ ! -f "$expected" ]] ; then
	echo "not ok - $TESTDESCRIPTION observed file $file not present in expected"
	exit 3
    fi
done

## since this is expected pass, enforce pytest functionality as a proxy for pytest configuration
pytest "$OUTPUTDIR/unit" > /dev/null 2>&1

if [[ "$?" != "0" ]] ; then
    echo "not ok - $TESTDESCRIPTION downstream pytest failed"
    exit 4
fi

## remove output
rm -Rf "$OUTPUTDIR"

## report success
echo "ok - $TESTDESCRIPTION"
