#!/usr/bin/env bash

## Test: deal with situations where unresolved include statements block python evaluation
echo 1..1

TESTNAME="test26"
TESTDESCRIPTION="handle inclusions blocking downstream variable evaluation"
INPUTDIR="tests/examples/$TESTNAME/input"
OUTPUTDIR="tests/examples/$TESTNAME/output"
EXPECTEDDIR="tests/examples/$TESTNAME/expected"
SNAKEMAKE_UNIT_TESTS="./snakemake_unit_tests.out"
INSTDIR="inst"

## just in case, delete existing output from previously failed tests
rm -Rf "$OUTPUTDIR"

## run test, dumping output into appropriate directory
"$SNAKEMAKE_UNIT_TESTS" --update-all --include-entire-dag -i "$INSTDIR" -l "$INPUTDIR/run.log" -o "$OUTPUTDIR" -p "$INPUTDIR" -s "$INPUTDIR/Snakefile" > /dev/null 2>&1
if [[ "$?" != "0" ]] ; then
    echo "not ok - $TESTDESCRIPTION primary run failed"
    exit 0
fi

## compare expected to observed output, ignoring pytest infrastructure
tests/compare_directories.bash "$EXPECTEDDIR" "$OUTPUTDIR" "$TESTDESCRIPTION"
if [[ "$?" != "0" ]] ; then
    exit 0
fi

## since this is expected pass, enforce pytest functionality as a proxy for pytest configuration
pytest "$OUTPUTDIR/unit" > /dev/null 2>&1

if [[ "$?" != "0" ]] ; then
    echo "not ok - $TESTDESCRIPTION downstream pytest failed"
    exit 0
fi

## remove output
rm -Rf "$OUTPUTDIR"

## report success
echo "ok - $TESTDESCRIPTION"
